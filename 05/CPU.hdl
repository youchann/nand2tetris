// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // 命令判定
    Mux16(a= instruction, b= outALU, sel= instruction[15], out= toA);
    Not(in= instruction[15], out= isA);
    Or(a= instruction[15], out= isC);
    And(a= isC, b= instruction[3], out= writeM);

    // Aレジスタ
    Or(a= isA, b= instruction[5], out= registA);
    ARegister(in= toA, load= registA, out= fromA, out[0..14]= addressM);
    // Dレジスタ
    And(a= isC, b= instruction[4], out= registD);
    DRegister(in= outALU, load= registD, out= fromD);

    // 命令をデコードする
    Mux16(a= fromA, b= inM, sel= instruction[12], out= y);
    ALU(x= fromD, y= y, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= outALU, out=outM, zr= zr, ng= ng);

    // need to know if ALU result is positive
    Not(in = ng, out = gt0);
    Not(in = zr, out = not0);
    And(a = gt0, b = not0, out = pos);

    And(a = instruction[2], b = ng, out = jump0);
    And(a = instruction[1], b = zr, out = jump1);
    And(a = instruction[0], b = pos, out = jump2);

    Or(a = jump0, b = jump1, out = jTemp);
    Or(a = jTemp, b = jump2, out = ugh);
    And(a = instruction[15], b = ugh, out = jump); // only jump on c instructions

    PC(in = fromA, load = jump, inc = true, reset = reset, out[0..14] = pc);
}